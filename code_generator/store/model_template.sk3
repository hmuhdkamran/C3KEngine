use c3k_common::interfaces::irepository::Model;
use serde::{Deserialize, Serialize};
pub use sqlx::{
    pool::PoolConnection,
    postgres::{PgArguments, PgPoolOptions, PgRow},
    Arguments, Error, PgPool, Postgres, Row,
    types::chrono::{DateTime, Utc},
};
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "PascalCase")]
pub struct $TABLE_NAME$ {
    $TABLE_COLUMNS$
}

impl $TABLE_NAME$ {
    pub const TABLE: &'static str = r#"$TABLE_NAME_TEXT$"#;
    pub const PK: &'static str = "$PRIMARY_KEY$";
    pub const COLUMNS_ARRAY: [&'static str; $TOTAL_COLUMNS$] = [$TABLE_COLUMNS_TEXT$];

    pub fn get_id(&self) -> Uuid {
        self.$PRIMARY_KEY_RUST$.clone()
    }

    pub fn get_args(&self) -> PgArguments {
        let mut args = PgArguments::default();
        $TABLE_COLUMNS_REPOSITORY$
        args
    }

    pub fn new($TABLE_COLUMN_RUST$) -> Self {
        Self {
            $TABLE_COLUMNS_RUST$
        }
    }
}

impl PartialEq for $TABLE_NAME$ {
    fn eq(&self, other: &Self) -> bool {
        self.$PRIMARY_KEY_RUST$ == other.$PRIMARY_KEY_RUST$
    }
}

impl Model for $TABLE_NAME$ {
    fn from_row(row: &PgRow) -> $TABLE_NAME$
    where
        Self: Sized,
    {
        $TABLE_COLUMN_ASSIGN_VALUE$

        Self {
            $TABLE_COLUMNS_RUST$
        }
    }
}
